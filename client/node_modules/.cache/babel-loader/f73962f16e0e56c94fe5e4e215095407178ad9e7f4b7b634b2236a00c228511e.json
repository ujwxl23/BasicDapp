{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ujwal\\\\SolidityProject1Hardhat\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport abi from \"./contracts/chai.json\";\nimport { ethers } from \"ethers\";\nimport Buy from './components/Buy';\nimport Memos from './components/Memos';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [state, setState] = useState({\n    //state set as null \n    provider: null,\n    signer: null,\n    contarct: null\n  });\n  const [account, setAccount] = useState(\"None\");\n  useEffect(() => {\n    const connectWallet = async () => {\n      const contractAddress = \"0x835189fa0e82a06549c030341949d2cec40b04fb\"; //contarct address\n      const contractABI = abi.abi; // contract abi \n      try {\n        const {\n          ethereum\n        } = window;\n        if (ethereum) {\n          const account = await ethereum.request({\n            method: \"eth_requestAccounts\"\n          }); // metamask code\n\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          window.ethereum.on(\"accountsChanged\", () => {\n            window.location.reload();\n          });\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const contract = new ethers.Contract(contractAddress, contractABI, signer); // creating a instance of contact using provider and signer\n          setState({\n            provider,\n            signer,\n            contract\n          }); // set new state\n          setAccount(account);\n        } else {\n          alert(\"Please install metamask\");\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    connectWallet(); //calling connectWallet to run \n  }, []);\n  console.log(state); // continue video 1:00:42...\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Connected Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Buy, {\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Memos, {\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"F2jUmtP5o+1OF7nb8ZJMjZ16TCw=\");\n_c = App;\nexport default App;\n\n// Blockchain Application Templete\n//import {useState,useEffect} from 'react';\n// import abi from \"./contracts/chai.json\";\n// import {ethers} from \"ethers\";\n\n// import './App.css';\n\n// function App() {\n//   const [state,setState]=useState({//state set as null \n//     provider:null,\n//     signer:null,\n//     contarct:null,\n//   });\n//   useEffect(() => {\n//     const connectWallet = async () => {\n//     const contractAddress = \"0x835189fa0e82a06549c030341949d2cec40b04fb\"; //contarct address\n//     const contractABI = abi.abi;// contract abi \n//     try{\n//       const {ethereum}=window;\n\n//       if (ethereum){\n//         const account = await ethereum.request({method:\"eth_requestAccounts\",})// metamask code\n//       }\n//       const provider = new ethers.providers.Web3Provider(ethereum);\n//       const signer = provider.getSigner();\n//       const contract = new ethers.Contract(contractAddress,contractABI,signer);// creating a instance of contact using provider and signer\n//       setState({provider,signer,contract})// set new state\n//     }catch(error){\n//       console.log(error);\n//     }\n//   };\n//   connectWallet(); //calling connectWallet to run \n//   }, []);\n//   console.log(state);\n//   return <div className=\"App\"></div> // continue video 1:00:42...\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","abi","ethers","Buy","Memos","jsxDEV","_jsxDEV","App","_s","state","setState","provider","signer","contarct","account","setAccount","connectWallet","contractAddress","contractABI","ethereum","window","request","method","on","location","reload","providers","Web3Provider","getSigner","contract","Contract","alert","error","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ujwal/SolidityProject1Hardhat/client/src/App.js"],"sourcesContent":["import {useState,useEffect} from 'react';\nimport abi from \"./contracts/chai.json\";\nimport {ethers} from \"ethers\";\nimport Buy from './components/Buy';\nimport Memos from './components/Memos';\n\n\nimport './App.css';\n\nfunction App() {\n  const [state,setState]=useState({//state set as null \n    provider:null,\n    signer:null,\n    contarct:null,\n  });\n\n  const [account, setAccount]=useState(\"None\");\n  useEffect(() => {\n    const connectWallet = async () => {\n    const contractAddress = \"0x835189fa0e82a06549c030341949d2cec40b04fb\"; //contarct address\n    const contractABI = abi.abi;// contract abi \n    try{\n      const {ethereum}=window;\n\n      if (ethereum){\n      const account = await ethereum.request({method:\"eth_requestAccounts\",})// metamask code\n      \n      window.ethereum.on(\"chainChanged\",()=> {\n        window.location.reload();\n      })  \n\n      window.ethereum.on(\"accountsChanged\",()=> {\n        window.location.reload();\n      })  \n\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress,contractABI,signer);// creating a instance of contact using provider and signer\n      setState({provider,signer,contract})// set new state\n      setAccount(account);\n      } else {\n        alert(\"Please install metamask\");\n      }\n    }catch(error){\n      console.log(error);\n    }\n  };\n  connectWallet(); //calling connectWallet to run \n  }, []);\n  console.log(state);// continue video 1:00:42...\n  return <div className=\"App\"> \n    <p>Connected Account</p>\n    <Buy state={state}></Buy>\n    <Memos state={state}></Memos>\n\n  </div> ;\n}\n\nexport default App;\n\n\n// Blockchain Application Templete\n//import {useState,useEffect} from 'react';\n// import abi from \"./contracts/chai.json\";\n// import {ethers} from \"ethers\";\n\n// import './App.css';\n\n// function App() {\n//   const [state,setState]=useState({//state set as null \n//     provider:null,\n//     signer:null,\n//     contarct:null,\n//   });\n//   useEffect(() => {\n//     const connectWallet = async () => {\n//     const contractAddress = \"0x835189fa0e82a06549c030341949d2cec40b04fb\"; //contarct address\n//     const contractABI = abi.abi;// contract abi \n//     try{\n//       const {ethereum}=window;\n\n//       if (ethereum){\n//         const account = await ethereum.request({method:\"eth_requestAccounts\",})// metamask code\n//       }\n//       const provider = new ethers.providers.Web3Provider(ethereum);\n//       const signer = provider.getSigner();\n//       const contract = new ethers.Contract(contractAddress,contractABI,signer);// creating a instance of contact using provider and signer\n//       setState({provider,signer,contract})// set new state\n//     }catch(error){\n//       console.log(error);\n//     }\n//   };\n//   connectWallet(); //calling connectWallet to run \n//   }, []);\n//   console.log(state);\n//   return <div className=\"App\"></div> // continue video 1:00:42...\n// }\n\n// export default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}